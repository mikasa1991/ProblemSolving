- 알고리즘 문제 해결 과정
1. 문제를 읽고 이해하기
2. 재정의와 추상화
현실 세계의 개념을 우리가 다루기 쉬운 수학적/전산학적 개념으로 옮겨 표현하는 과정입니다.
3. 계획 세우기
 문제를 어떤 방식으로 해결할지 결정하고, 사용할 알고리즘과 자료구조를 선택합니다.
 체계적인 접근을 위한 질문 리스트는 다음과 같다.
  비슷한 문제를 풀어본 적이 없는가?
  시간과 공간 제약을 생각하지 않고, 문제를 해결할 수 있는 가장 단순한 알고리즘은 없는가?
  내가 문제 푸는 과정을 수식화할 수 있을까?
  문제를 단순화할 수 없을까?
  그림으로 그려볼 수 있을까?
  문제를 분해할 수 있을까?
  뒤에서부터 생각해서 문제를 풀 수 있을까?
  순서를 강제할 수 있을까?
4. 계획 검증하기
 수행 시간과 사용 메모리가 문제의 제한 내에 들어가는지 확인한다.
5. 계획 수행하기
 프로그램을 작성한다.
6. 회고하기
 문제를 풀 때마다 코드와 함께 자신의 경험을 기록으로 남긴다.
 한 번에 맞추지 못한 경우에는 오답 원인을 꼭 적는다.
 다른 사람의 코드를 본다.
 문제를 풀지 못했을 때는 다른 사람의 코드를 보고 내 자신은 왜 이 풀이를 떠올리지 못했는지 복기한다.

- 디버깅과 테스팅
프로그래밍 대회에서 작성하는 소스 코드는 대개 길지 않기 때문에, 눈으로 디버깅하는 쪽이 훨씬 빠른 경우가 적지 않다.
재귀 호출이나 중복 반복문을 많이 사용하는 복잡한 코드는 디버깅하기에 적합하지 않다.
작은 입력에 대해 제대로 실행되나 확인하기.
Assert문을 쓴다.
프로그램의 계산 중간 결과를 출력한다.

-수행 시간 어림 짐작하기
1초당 반복문 수행 횟수가 1억(10^8)을 넘어가면 시간 제한을 초과할 가능성이 있다.